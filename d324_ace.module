<?php

/**
 * @file
 * Contains d324_ace.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Url;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\d324_ace\Event\AceMergeAttributesEvent;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_help().
 */
function d324_ace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the d324_ace module.
    case 'help.page.d324_ace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Entity reference field with layouts') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function d324_ace_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if (!empty($build['#ace_layout']) && !empty($build['regions']) && \Drupal::service('module_handler')->moduleExists('layout_discovery')) {
    /* @var \Drupal\Core\Layout\LayoutPluginManager @$layout_plugin_manager */
    $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
    if (!$layout_plugin_manager->getDefinition($build['#ace_layout'], FALSE)) {
      $messenger = \Drupal::messenger();
      $messenger->addMessage(t('Layout `%layout_id` is unknown.', ['%layout_id' => $build['#layout']]), 'warning');
      return;
    }

    // Provide any configuration to the layout plugin if necessary.
    /* @var \Drupal\Core\Layout\LayoutInterface $layout_instance */
    $layout_instance = $layout_plugin_manager->createInstance($build['#ace_layout'], $build['#ace_layout_config']);

    // This builds the render array.
    $build['_d324_ace'] = [
      '#weight' => 1000,
      'content' => $layout_instance->build($build['regions']),
    ];
    if (!empty($build['#ace_layout_options'])) {
      $layout_plugin_attributes = !empty($build['_d324_ace']['content']['#attributes']) ? $build['_d324_ace']['content']['#attributes'] : [];
      $attributes = d324_ace_merge_attributes($layout_plugin_attributes, $build['#ace_layout_options']);
      $build['_d324_ace']['content']['#attributes'] = $attributes;
    }

    unset($build['regions']);
  }
}

/**
 * Prepares variables for 'field.html.twig'.
 */
function d324_ace_preprocess_field(&$vars) {

  $element = $vars['element'];

  if ($element['#formatter'] == 'd324_ace') {

    /** @var Drupal\Core\Entity\FieldableEntityInterface $parent */
    $parent = $element['#object'];
    $parent_revision_id = ($parent->getRevisionId()) ? $parent->getRevisionId() : $parent->id();

    /* @var \Drupal\d324_ace\AceRevisionsFieldItemList $field */
    $field = $element['#items'];
    $field_definition = $field->getFieldDefinition();
    $field_storage_definition = $field_definition->getFieldStorageDefinition();

    $handler_settings = $field->getSetting('handler_settings');
    $layout_bundles = $handler_settings['layout_bundles'];
    $vars['items'] = _d324_ace_nest_items($element, $vars['items'], $layout_bundles);

    // Check update access for current node + permission to use D324 Ace frontend.
    if (
      !$parent->isLatestRevision() ||
      !$parent->access('update') ||
      !\Drupal::currentUser()->hasPermission('d324 ace manage paragraphs from front-end')
    ) {
      return;
    }

    $can_add_more_layouts = ($field_storage_definition->getCardinality() == -1 ||
      count($vars['items']) < $field_storage_definition->getCardinality());

    $can_add_more_fields = ($field_storage_definition->getCardinality() == -1 ||
      count($vars['items']) < $field_storage_definition->getCardinality());

    $delta = 0;
    $item_delta = 0;

    $field_wrapper_id = Html::getUniqueId('ace--' . $parent->id() );
    $vars['attributes']['data-ace-field-wrapper'] = $field_wrapper_id;

    foreach($vars['items'] as $layout_item_id => $layout_item) {
      $layout_wrapper_id = Html::getUniqueId('ace-layout-item-' . $layout_item_id);

      $langcode = Drupal::languageManager()->getCurrentLanguage()->getId();
      $translated_parent = FALSE;
      $non_paragraph_parent = d324_ace_get_non_paragraph_parent($parent);
      if ($non_paragraph_parent->isTranslatable()) {
        $parent_translation = Drupal::service('entity.repository')
          ->getTranslationFromContext($non_paragraph_parent);
        $translated_parent = !$parent_translation->isDefaultTranslation();
      }

      $layout_content = $layout_item['content'];
      $layout_regions = $layout_content['regions'];
      $layout_options = $layout_content['#ace_layout_options']['options'];

      $item_delta++;

      foreach($layout_regions as $region_name => $layout_region) {

        $region_wrapper_id = Html::getUniqueId('ace-region-' . $region_name);

        // Attach the region wrapper ID in a data-attribute.
        $vars['items'][$layout_item_id]['content']['regions'][$region_name]['#attributes']['data-ace-field-paragraph-region-wrapper'] = $region_wrapper_id;

        $region_index = 0;

        foreach($layout_region as $nested_paragraph) {

          $nested_paragraph_entity = $nested_paragraph['#paragraph'];

          $paragraph_to_cut = $nested_paragraph_entity;

          $links = [
            'top' => [
              'left' => [],
              'center' => [],
              'right' => [],
            ],
            'bottom' => [
              'left' => [],
              'center' => [],
              'right' => [],
            ],
          ];

          if (!$translated_parent && $can_add_more_fields) {
            // Add link - before.
            $links['top']['center']['add_before'] = [
              '#type' => 'link',
              '#icon' => 'add',
              '#title' => t('Add before'),
              '#url' => Url::fromRoute('d324_ace.modal.add_form', [
                'parent_entity_type' => $parent->getEntityType()->id(),
                'parent_entity_bundle' => $parent->bundle(),
                'parent_entity_revision' => $parent_revision_id,
                'field' => $vars['field_name'],
                'field_wrapper_id' => $field_wrapper_id,
                'delta' => $item_delta,
                'paragraph' => $nested_paragraph_entity->id(),
                'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                'layout_paragraph' => $layout_item_id,
                'layout_region' => $region_name,
                'position' => 'before',
                'js' => 'nojs',
              ]),
              '#attributes' => [
                'class' => ['use-ajax', 'd324-ace-button'],
                'data-dialog-type' => 'dialog',
                'data-dialog-renderer' => 'off_canvas',
                'data-dialog-options' => '{"width":"400px"}',
                'title' => t('Add section above'),
              ],
            ];

            // Add link - after.
            $links['bottom']['center']['add_after'] = [
              '#type' => 'link',
              '#icon' => 'add',
              '#title' => t('Add after'),
              '#url' => Url::fromRoute('d324_ace.modal.add_form', [
                'parent_entity_type' => $parent->getEntityType()->id(),
                'parent_entity_bundle' => $parent->bundle(),
                'parent_entity_revision' => $parent_revision_id,
                'field' => $vars['field_name'],
                'field_wrapper_id' => $field_wrapper_id,
                'delta' => $item_delta,
                'paragraph' => $nested_paragraph_entity->id(),
                'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                'layout_paragraph' => $layout_item_id,
                'layout_region' => $region_name,
                'position' => 'after',
                'js' => 'nojs',
              ]),
              '#attributes' => [
                'class' => ['use-ajax', 'd324-ace-button'],
                'data-dialog-type' => 'dialog',
                'data-dialog-renderer' => 'off_canvas',
                'data-dialog-options' => '{"width":"400px"}',
                'title' => t('Add section below'),
              ],
            ];
          }

          // Edit link.
          $links['top']['right']['edit'] = [
            '#type' => 'link',
            '#icon' => 'edit',
            '#title' => t('Edit'),
            '#url' => Url::fromRoute('d324_ace.modal.edit_form', [
              'parent_entity_type' => $parent->getEntityType()->id(),
              'parent_entity_bundle' => $parent->bundle(),
              'parent_entity_revision' => $parent_revision_id,
              'field' => $vars['field_name'],
              'field_wrapper_id' => $field_wrapper_id,
              'delta' => $item_delta,
              'paragraph' => $nested_paragraph_entity->id(),
              'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
              'layout_paragraph' => $layout_item_id,
              'layout_region' => $region_name,
              'js' => 'nojs',
            ]),
            '#attributes' => [
              'class' => ['use-ajax', 'd324-ace-button'],
              'data-dialog-type' => 'modal',
              'title' => t('Edit section'),
            ],
          ];
          if ($translated_parent) {
            if ($nested_paragraph_entity->isDefaultTranslation()) {
              $links['top']['right']['edit'] = [
                '#type' => 'link',
                '#icon' => 'edit',
                '#title' => t('Translate'),
                '#url' => Url::fromRoute('d324_ace.modal.translate_form', [
                  'parent_entity_type' => $parent->getEntityType()->id(),
                  'parent_entity_bundle' => $parent->bundle(),
                  'parent_entity_revision' => $parent_revision_id,
                  'field' => $vars['field_name'],
                  'field_wrapper_id' => $field_wrapper_id,
                  'delta' => $item_delta,
                  'paragraph' => $nested_paragraph_entity->id(),
                  'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                  'layout_paragraph' => $layout_item_id,
                  'layout_region' => $region_name,
                  'js' => 'nojs',
                ]),
                '#attributes' => [
                  'class' => ['use-ajax', 'd324-ace-button'],
                  'data-dialog-type' => 'modal',
                  'title' => t('Translate section'),
                ],
              ];
            }
            if (!$nested_paragraph_entity->isTranslatable()) {
              unset($links['top']['right']['edit']);
            }
          }

          if (!$translated_parent) {
            if (count($element['#items']) > 1) {
              // Cut link.
              $links['top']['left']['cut'] = [
                '#type' => 'link',
                '#title' => t('Cut'),
                '#icon' => 'cut',
                '#url' => Url::fromRoute('d324_ace.cut', [
                  'parent_entity_type' => $parent->getEntityType()->id(),
                  'parent_entity_bundle' => $parent->bundle(),
                  'parent_entity_revision' => $parent_revision_id,
                  'field' => $vars['field_name'],
                  'field_wrapper_id' => $field_wrapper_id,
                  'delta' => $item_delta,
                  'paragraph_to_cut' => $nested_paragraph_entity->id(),
                  'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                  'js' => 'nojs',
                ]),
                '#attributes' => [
                  'data-ace-field-wrapper' => $field_wrapper_id,
                  'class' => ['d324-ace-button'],
                  'data-dialog-type' => 'modal',
                  'title' => t('Cut section'),
                ],
              ];
            }

            // Delete link.
            $links['top']['right']['delete'] = [
              '#type' => 'link',
              '#icon' => 'delete',
              '#title' => t('Delete'),
              '#url' => Url::fromRoute('d324_ace.modal.delete_form', [
                'parent_entity_type' => $parent->getEntityType()->id(),
                'parent_entity_bundle' => $parent->bundle(),
                'parent_entity_revision' => $parent_revision_id,
                'field' => $vars['field_name'],
                'field_wrapper_id' => $field_wrapper_id,
                'delta' => $item_delta,
                'paragraph' => $nested_paragraph_entity->id(),
                'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                'js' => 'nojs',
              ]),
              '#attributes' => [
                'class' => ['use-ajax', 'd324-ace-button'],
                'data-dialog-type' => 'modal',
                'title' => t('Delete section'),
              ],
            ];
            if ($field_definition->isRequired() && count($element['#items']) == 1) {
              $links['top']['right']['delete']['#title'] = t('Cannot remove the last item of a required field');
              $links['top']['right']['delete']['#url'] = Url::fromUserInput('#');
              $links['top']['right']['delete']['#attributes']['class'][] = 'disabled';
              $links['top']['right']['delete']['#attributes']['title'] = t('Cannot remove the last item of a required field');
            }

            // Paste link - before.
            $links['top']['center']['paste_before'] = [
              '#type' => 'link',
              '#icon' => 'paste',
              '#title' => t('Paste'),
              '#url' => Url::fromRoute('d324_ace.paste', [
                'parent_entity_type' => $parent->getEntityType()->id(),
                'parent_entity_bundle' => $parent->bundle(),
                'parent_entity_revision' => $parent_revision_id,
                'field' => $vars['field_name'],
                'field_wrapper_id' => $field_wrapper_id,
                'delta' => $item_delta,
                'position' => 'before',
                'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                'paragraph_to_paste' => $paragraph_to_cut->id(),
                'layout_paragraph' => $layout_item_id,
                'layout_region' => $region_name,
                'js' => 'nojs',
              ]),
              '#attributes' => [
                'data-ace-field-wrapper' => $field_wrapper_id,
                'class' => ['use-ajax', 'd324-ace-button', 'd324-ace-paste'],
                'data-dialog-type' => 'modal',
                'title' => t('Paste above'),
              ],
            ];

            // Paste link - after.
            $links['bottom']['center']['paste_after'] = [
              '#type' => 'link',
              '#icon' => 'paste',
              '#title' => t('Paste'),
              '#url' => Url::fromRoute('d324_ace.paste', [
                'parent_entity_type' => $parent->getEntityType()->id(),
                'parent_entity_bundle' => $parent->bundle(),
                'parent_entity_revision' => $parent_revision_id,
                'field' => $vars['field_name'],
                'field_wrapper_id' => $field_wrapper_id,
                'delta' => $item_delta,
                'position' => 'after',
                'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
                'paragraph_to_paste' => $paragraph_to_cut->id(),
                'layout_paragraph' => $layout_item_id,
                'layout_region' => $region_name,
                'js' => 'nojs',
              ]),
              '#attributes' => [
                'data-ace-field-wrapper' => $field_wrapper_id,
                'class' => ['use-ajax', 'd324-ace-button', 'd324-ace-paste'],
                'data-dialog-type' => 'dialog',
                'data-dialog-renderer' => 'off_canvas',
                'data-dialog-options' => '{"width":"400px"}',
                'title' => t('Paste below'),
              ],
            ];
          }

          $context = [
            'paragraph' => $nested_paragraph_entity,
            'parent' => $parent,
            'delta' => $item_delta,
            'field_definition' => $field_definition,
          ];

          \Drupal::moduleHandler()->alter('d324_ace_paragraph_links', $links, $context);

          $vars['items'][$layout_item_id]['content']['regions'][$region_name][$region_index]['#attached'] = [
            'library' => [
              'core/drupal.dialog.ajax',
              'd324_ace/d324_ace_frontend',
            ],
          ];

          $vars['items'][$layout_item_id]['content']['regions'][$region_name][$region_index]['#theme_wrappers'] = ['d324_ace_frontend_paragraph_wrapper'];

          $vars['items'][$layout_item_id]['content']['regions'][$region_name][$region_index]['#paragraph_links'] = $links;

          if (
            $nested_paragraph_entity->isTranslatable() &&
            $nested_paragraph_entity->hasTranslation($langcode)
          ) {
            $layout_region[$delta]['#paragraph'] = $nested_paragraph_entity->getTranslation($langcode);
          }

          $region_index++;
          $delta++;
          $item_delta++;

        }
      }
      // Attach the field wrapper ID in a data-attribute.
      $vars['items'][$layout_item_id]['attributes']['data-ace-field-paragraph-layout-wrapper'] = $layout_wrapper_id;

      $layout_links = [
        'top' => [
          'left' => [],
          'center' => [],
          'right' => [],
        ],
        'bottom' => [
          'left' => [],
          'center' => [],
          'right' => [],
        ],
      ];

      $layout_links['top']['center']['add_before'] = [
        '#type' => 'link',
        '#icon' => 'columns',
        '#title' => t('Add layout container above'),
        '#url' => Url::fromRoute('d324_ace.modal.add_layout_form', [
          'parent_entity_type' => $parent->getEntityType()->id(),
          'parent_entity_bundle' => $parent->bundle(),
          'parent_entity_revision' => $parent_revision_id,
          'field' => $vars['field_name'],
          'field_wrapper_id' => $field_wrapper_id,
          'delta' => $item_delta,
          'paragraph' => $nested_paragraph_entity->id(),
          'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
          'position' => 'before',
          'js' => 'nojs',
        ]),
        '#attributes' => [
          'class' => ['use-ajax', 'd324-ace-button'],
          'data-dialog-type' => 'dialog',
          'data-dialog-renderer' => 'off_canvas',
          'data-dialog-options' => '{"width":"400px"}',
          'title' => t('Add layout container above'),
        ],
      ];

      // Add link - after.
      $layout_links['bottom']['center']['add_after'] = [
        '#type' => 'link',
        '#icon' => 'columns',
        '#title' => t('Add layout container below'),
        '#url' => Url::fromRoute('d324_ace.modal.add_layout_form', [
          'parent_entity_type' => $parent->getEntityType()->id(),
          'parent_entity_bundle' => $parent->bundle(),
          'parent_entity_revision' => $parent_revision_id,
          'field' => $vars['field_name'],
          'field_wrapper_id' => $field_wrapper_id,
          'delta' => $item_delta,
          'paragraph' => $nested_paragraph_entity->id(),
          'paragraph_revision' => $nested_paragraph_entity->getRevisionId(),
          'position' => 'after',
          'js' => 'nojs',
        ]),
        '#attributes' => [
          'class' => ['use-ajax', 'd324-ace-button'],
          'data-dialog-type' => 'dialog',
          'data-dialog-renderer' => 'off_canvas',
          'data-dialog-options' => '{"width":"400px"}',
          'title' => t('Add layout container below'),
        ],
      ];

      $vars['items'][$layout_item_id]['content']['#theme_wrappers'] = ['d324_ace_frontend_layout_wrapper'];

      $vars['items'][$layout_item_id]['content']['#layout_links'] = $layout_links;

      $vars['items'][$layout_item_id]['content']['#attached'] = [
        'library' => [
          'core/drupal.dialog.ajax',
          'd324_ace/d324_ace_frontend',
        ],
      ];

    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Using hook_preprocess_node().
 */
function d324_ace_preprocess_node(&$vars) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $vars["node"];

  if (
    empty($node) ||
    !Drupal::currentUser()->hasPermission('d324 ace manage paragraphs from front-end') ||
    !$node->isDefaultTranslation()
  ) {
    return;
  }

  $field_definitions = $node->getFieldDefinitions();

  // Check if multiple paragraph fields.
  $paragraph_fields = [];
  foreach ($field_definitions as $field_definition) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_Definition */
    if ($field_definition->getType() == 'entity_reference_revisions') {
      /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage_definition */
      $field_storage_definition = $field_definition->getFieldStorageDefinition();
      if ($field_storage_definition->getSetting('target_type') == 'paragraph') {
        $paragraph_fields[$field_storage_definition->get('field_name')] = $field_definition->getLabel();
      }
    }
  }

  if (empty($paragraph_fields)) {
    return;
  }

  foreach ($paragraph_fields as $field_name => $field_label) {
    // Check if the paragraph field already has paragraphs added.
    if (empty($vars['content'][$field_name]['#items'])) {
      $field_wrapper_id = Html::getUniqueId('ace--' . $node->id());

      $markup = d324_ace_get_add_first_paragraph_markup($node, $field_name, $field_wrapper_id, $field_label);
      $markup = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => ['data-ace-field-wrapper' => $field_wrapper_id],
        '#value' => $markup,
      ];
      $vars['content'][$field_name]['#suffix'] = Drupal::service('renderer')
        ->render($markup);
    }
  }
}

/**
 * Get the 'Add first paragraph' link.
 *
 * @param Node $node
 *  The parent node.
 * @param $field_name
 *  The field name.
 * @param $field_wrapper_id
 *  The wrapper in place for the field.
 * @param $field_label
 *  The field label
 *
 * @return mixed
 *  The markup of the link.
 */
function d324_ace_get_add_first_paragraph_markup(Node $node, $field_name, $field_wrapper_id, $field_label) {
  $links['add_before'] = [
    'title' => t('Start adding content to %field_label', ['%field_label' => $field_label]),
    'url' => Url::fromRoute('d324_ace.modal.add_form_first', [
      'parent_entity_type' => $node->getEntityType()->id(),
      'parent_entity_bundle' => $node->bundle(),
      'parent_entity_revision' => $node->getRevisionId(),
      'field' => $field_name,
      'field_wrapper_id' => $field_wrapper_id,
      'delta' => 0,
      'position' => 'before',
      'js' => 'nojs',
    ]),
    'attributes' => [
      'class' => ['use-ajax', 'd324-ace-button'],
      'data-dialog-type' => 'modal',
      'title' => t('Start adding content to %field_label', ['%field_label' => $field_label]),
    ],
  ];

  $links_array = [
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => [
      'class' => [
        'd324-ace-frontend-field-paragraph-links',
        'd324-ace-frontend-field-paragraph-add-first',
        'links',
      ],
    ],
    '#attached' => ['library' => ['core/drupal.dialog.ajax', 'd324_ace/d324_ace_frontend']],
  ];

  return Drupal::service('renderer')->render($links_array);
}

/**
 * Merges $layout_options into an $attributes array.
 *
 * Returned attributes are passed to a rendered layout,
 * typically with custom classes to be applied although can
 * include other data useful to rendering.
 *
 * Leverages even dispatcher pattern so other modules
 * can add data to attributes.
 */
function d324_ace_merge_attributes(array $attributes, array $layout_options) {
  if (!empty($layout_options)) {
    if (!empty($layout_options['options']['container_classes'])) {
      $attributes['class'][] = $layout_options['options']['container_classes'];
    }
    if (!empty($layout_options['options']['bg_color'])) {
      $attributes['style'] = ['background-color: ' . $layout_options['options']['bg_color']];
    }
  }

  $event = new AceMergeAttributesEvent($attributes, $layout_options);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(AceMergeAttributesEvent::EVENT_NAME, $event);

  return $attributes;
}

/**
 * Themes entity reference with layout field widget, using Layouts API.
 *
 * @param array $variables
 *   Contains the form element data from $element['entities'].
 */
function theme_d324_ace_widget(array $variables) {

  $renderer = \Drupal::service('renderer');
  $form = $variables['form'];
  $build = [
    'content' => [
      // Add a dependable wrapper to use for drag/drop.
      '#prefix' => '<div class="ace-field-item--layout-container">',
      '#suffix' => '</div>',
    ],
  ];

  // Add more structure to help styling.
  foreach (Element::children($form) as $key) {
    // If there is a form, wrap it for modal.
    if (isset($form[$key]['form'])) {
      $form[$key]['form'] = _d324_ace_modal_wrappers($form[$key]['form']);
    }
    // Add container element for form items.
    $copy = ['#type' => 'container', '#attributes' => ['class' => ['ace-field-item']]];
    foreach (Element::children($form[$key]) as $item_key) {
      $copy[$item_key] = $form[$key][$item_key];
      unset($form[$key][$item_key]);
    }
    $form[$key]['item'] = $copy;
    if (!empty($form[$key]['#layout'])) {
      $form[$key]['#prefix'] = '<div class="ace-field-item--layout">';
      $form[$key]['#suffix'] = '</div>';
    }

    // Add button classes.
    if (!empty($form[$key]['item']['actions']['ief_entity_edit'])) {
      $form[$key]['item']['actions']['ief_entity_edit']['#attributes']['class'][] = 'form-submit-edit';
    }
    if (!empty($form[$key]['item']['actions']['ief_entity_remove'])) {
      $form[$key]['item']['actions']['ief_entity_remove']['#attributes']['class'][] = 'form-submit-remove';
    }

    // Add container element for actions.
    if (!empty($form[$key]['item']['actions'])) {
      $form[$key]['item']['actions'] = [
        '#type' => 'container',
        'actions' => $form[$key]['item']['actions'],
        '#weight' => '-1000',
        '#attributes' => [
          'class' => ['container-inline', 'actions'],
        ],
      ];
    }
  }

  // Organize items into nested layouts.
  $layout_delta = -1;

  // Create a container for items not associated with a layout.
  // This happens when a user changes from one layout to another,
  // and the newly selected layout has different regions from
  // the original one.
  $disabled = [
    '#prefix' => '<a id ="disabled"></a>',
    '#type' => 'container',
    '#attributes' => [
      'class' => [
        'ace-layout-disabled',
      ],
    ],
    'title' => [
      '#type' => 'html_tag',
      '#tag' => 'legend',
      '#value' => t('Disabled items'),
    ],
    'container' => [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'ace-layout',
          'ace-layout-section',
        ],
      ],
      'description' => [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'ace-layout-disabled-description ',
          ],
        ],
        '#value' => t('Drop items here that you want to keep disabled / hidden, without removing them permanently.'),
      ],
      'items' => [],
    ],
  ];

  foreach (Element::children($form) as $key) {

    // Layout properties:
    $layout_element = [];
    if (isset($form[$key]['item']['layout_properties'])) {
      $layout_element = $form[$key]['item']['layout_properties'];
    }
    $layout = isset($layout_element['layout']['#value']) ? $layout_element['layout']['#value'] : '';
    $region = isset($layout_element['region']['#value']) ? $layout_element['region']['#value'] : '';
    $parent = isset($layout_element['parent']['#value']) ? $layout_element['parent']['#value'] : -1;

    // Process layout paragraphs.
    if (!empty($layout)) {
      $layout_delta = $key;
      $form[$key]['regions'] = [];
      // $form[$key]['#prefix'] = 'key: ' . $key;.
      /* @var \Drupal\Core\Layout\LayoutPluginManager @$layout_plugin_manager */
      $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
      /* @var \Drupal\Core\Layout\LayoutInterface $layout_instance */
      $layout_instance = $layout_plugin_manager->createInstance($layout);
      foreach ($layout_instance->getPluginDefinition()->getRegionNames() as $region_name) {
        $form[$key]['regions'][$region_name] = [
          '#attributes' => [
            'class' => [
              'ace-layout-section',
              'ace-layout-delta--' . $key,
              'ace-layout-section--' . $region_name,
            ],
          ],
        ];
      }
    }

    // Process paragraphs that go inside regions or that are "disabled".
    else {
      if (isset($parent) && $parent >= 0) {
        $layout_key = $parent;
      }
      else {
        $layout_key = $layout_delta;
      }
      if (isset($form[$layout_key]) && isset($form[$layout_key]['regions'][$region])) {
        $form[$layout_key]['regions'][$region]['content'][] = $form[$key];
      }
      else {
        if ($region) {
          \Drupal::messenger()->addMessage(t('One ore more items were <a href="#disabled">disabled.</a>'), 'warning');
        }
        $disabled['container']['items'][] = $form[$key];
      }
      $form[$key]['#skip'] = TRUE;
    }
  }

  // Build the render array.
  foreach (Element::children($form) as $key) {
    $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
    $form_item = $form[$key];

    if (isset($form_item['#skip'])) {
      continue;
    }

    $item = $form_item;
    if (isset($form_item['#layout'])) {
      $layout_instance = $layout_plugin_manager->createInstance($form_item['#layout'], $form_item['#layout_config']);
      // This builds the render array.
      // Add layout attributes:
      $attributes = d324_ace_merge_attributes(['class' => ['ace-layout']], $form_item['#layout_options']);
      if (!empty($form_item['regions'])) {
        $layout_build = NestedArray::mergeDeep(['#attributes' => $attributes], $layout_instance->build($form_item['regions']));
        $item['regions'] = [
          'content' => $layout_build,
          '#weight' => 100,
          '#attributes' => [
            'class' => ['ace-layout'],
          ],
        ];
      }
    }
    if (empty($form[$key]['#skip'])
      && isset($form[$key]['item']['layout_properties']['parent']['#value'])
      && $form[$key]['item']['layout_properties']['parent']['#value'] > -1) {
      $parent = $form[$key]['item']['layout_properties']['parent']['#value'];
      $item['#weight'] = $parent - .5;
    }
    $build['content'][] = $item;
  }
  // Add "disabled" container to build (anyway) with eventual items into it.
  $build['disabled'] = $disabled;

  // $build['#attached']['drupalSettings']['erlLayoutFields'][$form['#id']] = $form['#id'];
  $build['#attached']['library'][] = 'd324_ace/d324_ace';
  return $renderer->render($build);
}

/**
 * Helper function to nest references entities into regions within a layout.
 *
 * @param array $element
 *   The field item containing referenced entities.
 * @param array $items
 *   Array of referenced entities.
 * @param array $layout_bundles
 *   Array of bundles (typically paragraph bundles)
 *   that can be associated with layouts.
 */
function _d324_ace_nest_items(array $element, array $items, array $layout_bundles) {
  $nested_items = [];
  foreach ($items as $delta => $item) {
    /* @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $element['#items'][$delta]->entity;
    $config = $element['#items'][$delta]->config;
    $options = $element['#items'][$delta]->options;

    $region = !empty($element['#items'][$delta]->region) ? $element['#items'][$delta]->region : '';
    $layout = !empty($element['#items'][$delta]->layout) ? $element['#items'][$delta]->layout : '';

    if (isset($entity) && in_array($entity->bundle(), $layout_bundles)) {
      $item['content']['#ace_layout'] = $layout;
      $item['content']['#ace_layout_config'] = !empty($config) ? $config : [];
      $item['content']['#ace_layout_options'] = $options;
      $section_id = $entity->id();
    }

    // Add items with region or layout value into the rendering list.
    // Disabled items won't have any of them, so they won't be included,
    // and rendered.
    if (!empty($region)) {
      if (empty($nested_items[$section_id]['content']['regions'][$region])) {
        $nested_items[$section_id]['content']['regions'][$region] = [];
      }
      $nested_items[$section_id]['content']['regions'][$region][] = $item['content'];
    }
    elseif (!empty($layout)) {
      $nested_items[$entity->id()] = $item;
    }
  }
  return $nested_items;
}

/**
 * Implements hook_theme().
 */
function d324_ace_theme() {
  return [
    'd324_ace_widget' => [
      'render element' => 'form',
      'function' => 'theme_d324_ace_widget',
    ],
    'd324_ace_ief' => [
      'render element' => 'form',
      'function' => 'theme_d324_ace_ief',
    ],
    'd324_ace_radio' => [
      'render element' => 'element',
      'function' => 'theme_d324_ace_radio',
    ],
    'd324_ace_frontend_field_paragraph_links' => [
      'variables' => [
        'top' => [
          'left' => [],
          'center' => [],
          'right' => [],
        ],
        'bottom' => [
          'left' => [],
          'center' => [],
          'right' => [],
        ],
      ],
      'file' => 'd324_ace.theme.inc',
    ],
    'd324_ace_frontend_paragraph_wrapper' => [
      'render element' => 'element',
      'file' => 'd324_ace.theme.inc',
    ],
    'd324_ace_frontend_layout_wrapper' => [
      'render element' => 'element',
      'file' => 'd324_ace.theme.inc',
    ],
    'd324_ace_frontend_modal_content_wrapper' => [
      'variables' => [
        'content' => [],
      ],
      'file' => 'd324_ace.theme.inc',
    ],
    'd324_ace_frontend_dialog_content_wrapper' => [
      'render element' => 'elements',
      'file' => 'd324_ace.theme.inc',
    ],
  ];
}

/**
 * Implements hook_d324_ace_radio().
 *
 * Custom theme hook for adding layout icons
 * and wrapper HTML to layout select radios.
 */
function theme_d324_ace_radio($element) {
  /* @var \Drupal\Core\Layout\LayoutPluginManager $layout_plugin_manager */
  $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
  $renderer = \Drupal::service('renderer');
  $layout_name = $element['element']['#return_value'];
  try {
    /* @var \Drupal\Core\Layout\LayoutDefinition $definition */
    $definition = $layout_plugin_manager->getDefinition($layout_name);
    $icon = $definition->getIcon(40, 60, 1, 0);
    $rendered_icon = $renderer->render($icon);

    $layout_item = [
      '#type' => 'container',
      '#prefix' => '<div class="layout-radio-item">',
      '#suffix' => '</div>',
      'icon' => [
        '#prefix' => '<div class="layout-icon-wrapper">',
        '#suffix' => '</div>',
        '#markup' => $rendered_icon,
      ],
      'radio' => [
        '#type' => 'container',
        '#attributes' => [
          // 'class' => ['visually-hidden'],
        ],
        'item' => ['#markup' => $element['element']['#children']],
      ],
    ];

    return \Drupal::service('renderer')->render($layout_item);
  }
  catch (\Exception $e) {
    watchdog_exception('d324_ace', $e);
  }

}

/**
 * Wraps $element in HTML used for rendering modal.
 */
function _d324_ace_modal_wrappers(array $element) {
  $modal_wrapper = [
    '#prefix' => '<div id="ace-modal">',
    '#suffix' => '</div>',
  ];
  $element += $modal_wrapper;
  return $element;
}

/**
 * Process function for ace forms
 */
function d324_ace_alter_form(&$element, &$form_state) {
  $element['#attributes']['class'][] = 'ace-entity-form';
  $element = _d324_ace_modal_wrappers($element);
  return $element;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function d324_ace_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {

  $route_match = \Drupal::routeMatch();

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $entity_form['#entity'];

  $behavior_element = [];
  // Build the behavior plugins fields, do not display behaviors when
  // translating and untranslatable fields are hidden.
  $paragraphs_type = $paragraph->getParagraphType();
  if ($paragraphs_type && \Drupal::currentUser()->hasPermission('edit behavior plugin settings')) {
    $behavior_element['#weight'] = 99;
    $behavior_element['#type'] = 'details';
    $behavior_element['#open'] = FALSE;
    $behavior_element['#title'] = 'Additional Styles and Behaviors';
    foreach ($paragraphs_type->getEnabledBehaviorPlugins() as $plugin_id => $plugin) {
      $behavior_element[$plugin_id] = [
        '#type' => 'container',
        '#tree' => TRUE,
        // '#group' => implode('][', array_merge($element_parents, ['paragraph_behavior'])),
      ];
      $subform_state = SubformState::createForSubform($behavior_element[$plugin_id], $entity_form, $form_state);
      if ($plugin_form = $plugin->buildBehaviorForm($paragraph, $behavior_element[$plugin_id], $subform_state)) {
        $behavior_element[$plugin_id] = $plugin_form;
        // Add the paragraphs-behavior class, so that we are able to show
        // and hide behavior fields, depending on the active perspective.
        $behavior_element[$plugin_id]['#attributes']['class'][] = 'paragraphs-behavior';
      }
    }
  }

  $entity_form['behavior_plugins'] = $behavior_element;
  array_unshift($entity_form['#ief_element_submit'], 'd324_ace_ief_submit');
}

function d324_ace_ief_submit(&$form, &$form_state) {
  $paragraph = $form['#entity'];

  if (isset($form['behavior_plugins'])) {
    // Submit all enabled behavior plugins.
    $paragraphs_type = $paragraph->getParagraphType();
    foreach ($paragraphs_type->getEnabledBehaviorPlugins() as $plugin_id => $plugin_values) {
      if (!isset($form['behavior_plugins'][$plugin_id])) {
        $form['behavior_plugins'][$plugin_id] = [];
      }
      if (isset($form['behavior_plugins'][$plugin_id]) && \Drupal::currentUser()->hasPermission('edit behavior plugin settings')) {
        $subform_state = SubformState::createForSubform($form['behavior_plugins'][$plugin_id], $form_state->getCompleteForm(), $form_state);
        if (isset($form['behavior_plugins'][$plugin_id])) {
          $plugin_values->submitBehaviorForm($paragraph, $form['behavior_plugins'][$plugin_id], $subform_state);
        }
      }
    }
  }

  $form['#entity'] = $paragraph;
}

/**
 * Implements hook_d324_ace_ief().
 *
 * Adds structure and classes to inline entity form.
 */
function theme_d324_ace_ief($variables) {
  $form = $variables['form'];
  $renderer = \Drupal::service('renderer');
  $container = [
    '#type' => 'container',
    '#attributes' => [
      'class' => [
        'ace-form-body',
        'scrollable',
      ],
    ],
  ];
  foreach (Element::children($form['inline_entity_form']) as $key) {
    if ($key != 'actions') {
      $container[$key] = $form['inline_entity_form'][$key];
      unset($form['inline_entity_form'][$key]);
    }
  }
  $form['inline_entity_form']['#attributes']['class'][] = 'ace-form-container';
  $form['inline_entity_form']['ace_form_body'] = $container;
  return $renderer->render($form);
}

/**
 * Implements hook_entity_type_build().
 */
function d324_ace_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add forms for Paragraphs without overriding the default forms.
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_delete', '\Drupal\d324_ace\Form\AceParagraphDeleteForm');
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_edit', '\Drupal\d324_ace\Form\AceParagraphForm');
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_modal_add', '\Drupal\d324_ace\Form\AceModalParagraphAddForm');
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_modal_delete', '\Drupal\d324_ace\Form\AceModalParagraphDeleteForm');
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_modal_edit', '\Drupal\d324_ace\Form\AceModalParagraphForm');
  $entity_types['paragraph']->setFormClass('d324_ace_frontend_modal_add_layout', '\Drupal\d324_ace\Form\AceModalParagraphAddLayoutForm');
}

/**
 * Gets the first parent that is not a paragraph.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *
 * @return Drupal\Core\Entity\EntityInterface $entity
 */
function d324_ace_get_non_paragraph_parent(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'paragraph') {
    return $entity;
  }
  else {
    /** @var Drupal\paragraphs\Entity\Paragraph $entity */
    return d324_ace_get_non_paragraph_parent($entity->getParentEntity());
  }
}

/**
 * Gets the first ace layout parent
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *
 * @return Drupal\Core\Entity\EntityInterface $entity
 */
function d324_ace_get_ace_layout_parent(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'paragraph') {
    return $entity;
  }
  else {
    /** @var Drupal\paragraphs\Entity\Paragraph $entity */
    return d324_ace_get_ace_layout_parent($entity->getParentEntity());
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_storage_add_form'.
 */
function d324_ace_form_field_ui_field_storage_add_form_alter(array &$form) {
  if (isset($form['add']['new_storage_type']['#options'][(string) t('Reference revisions')]['field_ui:d324_ace_revisioned:paragraph'])) {
    // @todo Figure out why this option breaks the field config form
    // and reintroduce it if possible.
    // See https://www.drupal.org/project/d324_ace/issues/3041126
    unset($form['add']['new_storage_type']['#options'][(string) t('Reference revisions')]['field_ui:d324_ace_revisioned:paragraph']);
  }
}
